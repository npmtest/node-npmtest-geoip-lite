{"/home/travis/build/npmtest/node-npmtest-geoip-lite/test.js":"/* istanbul instrument in package npmtest_geoip_lite */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-geoip-lite/lib.npmtest_geoip_lite.js":"/* istanbul instrument in package npmtest_geoip_lite */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_geoip_lite = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_geoip_lite = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-geoip-lite/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-geoip-lite && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_geoip_lite */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_geoip_lite\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_geoip_lite.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_geoip_lite.rollup.js'] =\n            local.assetsDict['/assets.npmtest_geoip_lite.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_geoip_lite.__dirname + '/lib.npmtest_geoip_lite.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-geoip-lite/node_modules/geoip-lite/lib/geoip.js":"var fs = require('fs');\nvar net = require('net');\nvar path = require('path');\n\nfs.existsSync = fs.existsSync || path.existsSync;\n\nvar utils = require('./utils');\nvar fsWatcher = require('./fsWatcher');\nvar async = require('async');\n\nvar watcherName = 'dataWatcher';\n\n\nvar geodatadir;\n\nif (typeof global.geodatadir === 'undefined'){\n\tgeodatadir = path.join(__dirname, '/../data/');\n} else {\n\tgeodatadir = global.geodatadir;\n}\n\nvar dataFiles = {\n\tcity: path.join(geodatadir, 'geoip-city.dat'),\n\tcity6: path.join(geodatadir, 'geoip-city6.dat'),\n\tcityNames: path.join(geodatadir, 'geoip-city-names.dat'),\n\tcountry: path.join(geodatadir, 'geoip-country.dat'),\n\tcountry6: path.join(geodatadir, 'geoip-country6.dat')\n};\n\nvar privateRange4 = [\n\t\t[utils.aton4('10.0.0.0'), utils.aton4('10.255.255.255')],\n\t\t[utils.aton4('172.16.0.0'), utils.aton4('172.31.255.255')],\n\t\t[utils.aton4('192.168.0.0'), utils.aton4('192.168.255.255')]\n\t]\n\nvar cache4 = {\n\tfirstIP: null,\n\tlastIP: null,\n\tlastLine: 0,\n\tlocationBuffer: null,\n\tlocationRecordSize: 64,\n\tmainBuffer: null,\n\trecordSize: 12\n};\n\nvar cache6 = {\n\tfirstIP: null,\n\tlastIP: null,\n\tlastLine: 0,\n\tmainBuffer: null,\n\trecordSize: 58\n};\n\nvar RECORD_SIZE = 10;\nvar RECORD_SIZE6 = 34\n\nfunction lookup4(ip) {\n\tvar fline = 0;\n\tvar floor = cache4.lastIP;\n\tvar cline = cache4.lastLine;\n\tvar ceil = cache4.firstIP;\n\tvar line;\n\tvar locId;\n\n\tvar buffer = cache4.mainBuffer;\n\tvar locBuffer = cache4.locationBuffer;\n\tvar privateRange = privateRange4;\n\tvar recordSize = cache4.recordSize;\n\tvar locRecordSize = cache4.locationRecordSize;\n\n\tvar i;\n\n\tvar geodata = {\n\t\trange: '',\n\t\tcountry: '',\n\t\tregion: '',\n\t\tcity: '',\n\t\tll: [0, 0]\n\t};\n\n\t// outside IPv4 range\n\tif (ip > cache4.lastIP || ip < cache4.firstIP) {\n\t\treturn null;\n\t}\n\n\t// private IP\n\tfor (i = 0; i < privateRange.length; i++) {\n\t\tif (ip >= privateRange[i][0] && ip <= privateRange[i][1]) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tdo {\n\t\tline = Math.round((cline - fline) / 2) + fline;\n\t\tfloor = buffer.readUInt32BE(line * recordSize);\n\t\tceil  = buffer.readUInt32BE((line * recordSize) + 4);\n\n\t\tif (floor <= ip && ceil >= ip) {\n\t\t\tgeodata.range = [floor, ceil];\n\n\t\t\tif (recordSize === RECORD_SIZE) {\n\t\t\t\tgeodata.country = buffer.toString('utf8', (line * recordSize) + 8, (line * recordSize) + 10);\n\t\t\t} else {\n\t\t\t\tlocId = buffer.readUInt32BE((line * recordSize) + 8) - 1;\n\n\t\t\t\tgeodata.country = locBuffer.toString('utf8', (locId * locRecordSize) + 0, (locId * locRecordSize) + 2).replace(/\\u0000.*/, '');\n\t\t\t\tgeodata.region = locBuffer.toString('utf8', (locId * locRecordSize) + 2, (locId * locRecordSize) + 4).replace(/\\u0000.*/, '');\n\t\t\t\tgeodata.ll = [locBuffer.readInt32BE((locId * locRecordSize) + 4) / 10000, locBuffer.readInt32BE((locId * locRecordSize) + 8) / 10000];\n\t\t\t\tgeodata.metro = locBuffer.readInt32BE((locId * locRecordSize) + 12);\n\t\t\t\tgeodata.zip = locBuffer.readInt32BE((locId * locRecordSize) + 16);\n\t\t\t\tgeodata.city = locBuffer.toString('utf8', (locId * locRecordSize) + 20, (locId * locRecordSize) + locRecordSize).replace(/\\u0000.*/, '');\n\t\t\t}\n\n\t\t\treturn geodata;\n\t\t} else if (fline === cline) {\n\t\t\treturn null;\n\t\t} else if (fline === (cline - 1)) {\n\t\t\tif (line === fline) {\n\t\t\t\tfline = cline;\n\t\t\t} else {\n\t\t\t\tcline = fline;\n\t\t\t}\n\t\t} else if (floor > ip) {\n\t\t\tcline = line;\n\t\t} else if (ceil < ip) {\n\t\t\tfline = line;\n\t\t}\n\t} while(1);\n}\n\nfunction lookup6(ip) {\n\tvar buffer = cache6.mainBuffer;\n\tvar recordSize = cache6.recordSize;\n\n\tvar geodata = {\n\t\trange: '',\n\t\tcountry: '',\n\t\tregion: '',\n\t\tcity: '',\n\t\tll: [0, 0]\n\t};\n\n\t// XXX We only use the first 8 bytes of an IPv6 address\n\t// This identifies the network, but not the host within\n\t// the network.  Unless at some point of time we have a\n\t// global peace treaty and single subnets span multiple\n\t// countries, this should not be a problem.\n\tfunction readip(line, offset) {\n\t\tvar ii = 0;\n\t\tvar ip = [];\n\n\t\tfor (ii = 0; ii < 2; ii++) {\n\t\t\tip.push(buffer.readUInt32BE((line * recordSize) + (offset * 16) + (ii * 4)));\n\t\t}\n\n\t\treturn ip;\n\t}\n\n\tcache6.lastIP = readip(cache6.lastLine, 1);\n\tcache6.firstIP = readip(0, 0);\n\n\tvar fline = 0;\n\tvar floor = cache6.lastIP;\n\tvar cline = cache6.lastLine;\n\tvar ceil = cache6.firstIP;\n\tvar line;\n\n\tif (utils.cmp6(ip, cache6.lastIP) > 0 || utils.cmp6(ip, cache6.firstIP) < 0) {\n\t\treturn null;\n\t}\n\n\tdo {\n\t\tline = Math.round((cline - fline) / 2) + fline;\n\t\tfloor = readip(line, 0);\n\t\tceil  = readip(line, 1);\n\n\t\tif (utils.cmp6(floor, ip) <= 0 && utils.cmp6(ceil, ip) >= 0) {\n\t\t\tif (recordSize === RECORD_SIZE6) {\n\t\t\t\tgeodata.country = buffer.toString('utf8', (line * recordSize) + 32, (line * recordSize) + 34).replace(/\\u0000.*/, '');\n\t\t\t} else {\n\t\t\t\tgeodata.range = [floor, ceil];\n\t\t\t\tgeodata.country = buffer.toString('utf8', (line * recordSize) + 32, (line * recordSize) + 34).replace(/\\u0000.*/, '');\n\t\t\t\tgeodata.region = buffer.toString('utf8', (line * recordSize) + 34, (line * recordSize) + 36).replace(/\\u0000.*/, '');\n\t\t\t\tgeodata.ll = [buffer.readInt32BE((line * recordSize) + 36) / 10000, buffer.readInt32BE((line * recordSize) + 40) / 10000];\n\t\t\t\tgeodata.city = buffer.toString('utf8', (line * recordSize) + 44, (line * recordSize) + recordSize).replace(/\\u0000.*/, '');\n\t\t\t}\n\n\t\t\t// We do not currently have detailed region/city info for IPv6, but finally have coords\n\t\t\treturn geodata;\n\t\t} else if (fline === cline) {\n\t\t\treturn null;\n\t\t} else if (fline === (cline - 1)) {\n\t\t\tif (line === fline) {\n\t\t\t\tfline = cline;\n\t\t\t} else {\n\t\t\t\tcline = fline;\n\t\t\t}\n\t\t} else if (utils.cmp6(floor, ip) > 0) {\n\t\t\tcline = line;\n\t\t} else if (utils.cmp6(ceil, ip) < 0) {\n\t\t\tfline = line;\n\t\t}\n\t} while(1);\n}\n\nfunction get4mapped(ip) {\n    var ipv6 = ip.toUpperCase();\n    var v6prefixes = ['0:0:0:0:0:FFFF:', '::FFFF:'];\n    for (var i = 0; i < v6prefixes.length; i++) {\n        var v6prefix = v6prefixes[i];\n        if (ipv6.indexOf(v6prefix) == 0) {\n            return ipv6.substring(v6prefix.length);\n        }\n    }\n    return null;\n}\n\nfunction preload(callback) {\n\tvar datFile;\n\tvar datSize;\n\tvar asyncCache = {\n\t\tfirstIP: null,\n\t\tlastIP: null,\n\t\tlastLine: 0,\n\t\tlocationBuffer: null,\n\t\tlocationRecordSize: 64,\n\t\tmainBuffer: null,\n\t\trecordSize: 12\n\t};\n\n\t//when the preload function receives a callback, do the task asynchronously\n\tif (typeof arguments[0] === 'function') {\n\t\tasync.series([\n\t\t\tfunction (cb) {\n\t\t\t\tasync.series([\n\t\t\t\t\tfunction (cb2) {\n\t\t\t\t\t\tfs.open(dataFiles.cityNames, 'r', function (err, file) {\n\t\t\t\t\t\t\tdatFile = file;\n\t\t\t\t\t\t\tcb2(err);\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tfunction (cb2) {\n\t\t\t\t\t\tfs.fstat(datFile, function (err, stats) {\n\t\t\t\t\t\t\tdatSize = stats.size;\n\t\t\t\t\t\t\tasyncCache.locationBuffer = new Buffer(datSize);\n\t\t\t\t\t\t\tcb2(err);\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tfunction (cb2) {\n\t\t\t\t\t\tfs.read(datFile, asyncCache.locationBuffer, 0, datSize, 0, cb2);\n\t\t\t\t\t},\n\t\t\t\t\tfunction (cb2) {\n\t\t\t\t\t\tfs.close(datFile, cb2);\n\t\t\t\t\t},\n\t\t\t\t\tfunction (cb2) {\n\t\t\t\t\t\tfs.open(dataFiles.city, 'r', function (err, file) {\n\t\t\t\t\t\t\tdatFile = file;\n\t\t\t\t\t\t\tcb2(err);\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tfunction (cb2) {\n\t\t\t\t\t\tfs.fstat(datFile, function (err, stats) {\n\t\t\t\t\t\t\tdatSize = stats.size;\n\t\t\t\t\t\t\tcb2(err);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t], function (err) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tif (err.code !== 'ENOENT' && err.code !== 'EBADF') {\n\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfs.open(dataFiles.country, 'r', function (err, file) {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tcb(err);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdatFile = file;\n\t\t\t\t\t\t\t\tfs.fstat(datFile, function (err, stats) {\n\t\t\t\t\t\t\t\t\tdatSize = stats.size;\n\t\t\t\t\t\t\t\t\tasyncCache.recordSize = RECORD_SIZE;\n\n\t\t\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcb();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\tfunction () {\n\t\t\t\tasyncCache.mainBuffer = new Buffer(datSize);\n\t\t\t\t\n\t\t\t\tasync.series([\n\t\t\t\t\tfunction (cb2) {\n\t\t\t\t\t\tfs.read(datFile, asyncCache.mainBuffer, 0, datSize, 0, cb2);\n\t\t\t\t\t},\n\t\t\t\t\tfunction (cb2) {\n\t\t\t\t\t\tfs.close(datFile, cb2);\n\t\t\t\t\t}\n\t\t\t\t], function (err) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\t//keep old cache\n\t\t\t\t\t} else {\n\t\t\t\t\t\tasyncCache.lastLine = (datSize / asyncCache.recordSize) - 1;\n\t\t\t\t\t\tasyncCache.lastIP = asyncCache.mainBuffer.readUInt32BE((asyncCache.lastLine * asyncCache.recordSize) + 4);\n\t\t\t\t\t\tcache4 = asyncCache;\n\t\t\t\t\t}\n\t\t\t\t\tcallback(err);\n\t\t\t\t});\n\t\t\t}\n\t\t]);\n\t} else {\n\t\ttry {\n\t\t\tdatFile = fs.openSync(dataFiles.cityNames, 'r');\n\t\t\tdatSize = fs.fstatSync(datFile).size;\n\n\t\t\tif (datSize === 0) {\n\t\t\t\tthrow {\n\t\t\t\t\tcode: 'EMPTY_FILE'\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcache4.locationBuffer = new Buffer(datSize);\n\t\t\tfs.readSync(datFile, cache4.locationBuffer, 0, datSize, 0);\n\t\t\tfs.closeSync(datFile);\n\n\t\t\tdatFile = fs.openSync(dataFiles.city, 'r');\n\t\t\tdatSize = fs.fstatSync(datFile).size;\n\t\t} catch(err) {\n\t\t\tif (err.code !== 'ENOENT' && err.code !== 'EBADF' && err.code !== 'EMPTY_FILE') {\n\t\t\t\tthrow err;\n\t\t\t}\n\n\t\t\tdatFile = fs.openSync(dataFiles.country, 'r');\n\t\t\tdatSize = fs.fstatSync(datFile).size;\n\t\t\tcache4.recordSize = RECORD_SIZE;\n\t\t}\n\n\t\tcache4.mainBuffer = new Buffer(datSize);\n\t\tfs.readSync(datFile, cache4.mainBuffer, 0, datSize, 0);\n\n\t\tfs.closeSync(datFile);\n\n\t\tcache4.lastLine = (datSize / cache4.recordSize) - 1;\n\t\tcache4.lastIP = cache4.mainBuffer.readUInt32BE((cache4.lastLine * cache4.recordSize) + 4);\n\t\tcache4.firstIP = cache4.mainBuffer.readUInt32BE(0);\n\t}\n}\n\nfunction preload6(callback) {\n\tvar datFile;\n\tvar datSize;\n\tvar asyncCache6 = {\n\t\tfirstIP: null,\n\t\tlastIP: null,\n\t\tlastLine: 0,\n\t\tmainBuffer: null,\n\t\trecordSize: 58\n\t};\n\n\t//when the preload function receives a callback, do the task asynchronously\n\tif (typeof arguments[0] === 'function') {\n\t\tasync.series([\n\t\t\tfunction (cb) {\n\t\t\t\tasync.series([\n\t\t\t\t\tfunction (cb2) {\n\t\t\t\t\t\tfs.open(dataFiles.city6, 'r', function (err, file) {\n\t\t\t\t\t\t\tdatFile = file;\n\t\t\t\t\t\t\tcb2(err);\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tfunction (cb2) {\n\t\t\t\t\t\tfs.fstat(datFile, function (err, stats) {\n\t\t\t\t\t\t\tdatSize = stats.size;\n\t\t\t\t\t\t\tcb2(err);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t], function (err) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tif (err.code !== 'ENOENT' && err.code !== 'EBADF') {\n\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfs.open(dataFiles.country6, 'r', function (err, file) {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tcb(err);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdatFile = file;\n\t\t\t\t\t\t\t\tfs.fstat(datFile, function (err, stats) {\n\t\t\t\t\t\t\t\t\tdatSize = stats.size;\n\t\t\t\t\t\t\t\t\tasyncCache6.recordSize = RECORD_SIZE6;\n\n\t\t\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcb();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\tfunction () {\n\t\t\t\tasyncCache6.mainBuffer = new Buffer(datSize);\n\t\t\t\t\n\t\t\t\tasync.series([\n\t\t\t\t\tfunction (cb2) {\n\t\t\t\t\t\tfs.read(datFile, asyncCache6.mainBuffer, 0, datSize, 0, cb2);\n\t\t\t\t\t},\n\t\t\t\t\tfunction (cb2) {\n\t\t\t\t\t\tfs.close(datFile, cb2);\n\t\t\t\t\t}\n\t\t\t\t], function (err) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\t//keep old cache\n\t\t\t\t\t} else {\n\t\t\t\t\t\tasyncCache6.lastLine = (datSize / asyncCache6.recordSize) - 1;\n\t\t\t\t\t\tcache6 = asyncCache6;\n\t\t\t\t\t}\n\t\t\t\t\tcallback(err);\n\t\t\t\t});\n\t\t\t}\n\t\t]);\n\t} else {\n\t\ttry {\n\t\t\tdatFile = fs.openSync(dataFiles.city6, 'r');\n\t\t\tdatSize = fs.fstatSync(datFile).size;\n\n\t\t\tif (datSize === 0) {\n\t\t\t\tthrow {\n\t\t\t\t\tcode: 'EMPTY_FILE'\n\t\t\t\t};\n\t\t\t}\n\t\t} catch(err) {\n\t\t\tif (err.code !== 'ENOENT' && err.code !== 'EBADF' && err.code !== 'EMPTY_FILE') {\n\t\t\t\tthrow err;\n\t\t\t}\n\n\t\t\tdatFile = fs.openSync(dataFiles.country6, 'r');\n\t\t\tdatSize = fs.fstatSync(datFile).size;\n\t\t\tcache6.recordSize = RECORD_SIZE6;\n\t\t}\n\n\t\tcache6.mainBuffer = new Buffer(datSize);\n\t\tfs.readSync(datFile, cache6.mainBuffer, 0, datSize, 0);\n\n\t\tfs.closeSync(datFile);\n\n\t\tcache6.lastLine = (datSize / cache6.recordSize) - 1;\n\t}\n}\n\nmodule.exports = {\n\tcmp: utils.cmp,\n\n\tlookup: function(ip) {\n\t\tif (!ip) {\n\t\t\treturn null;\n\t\t} else if (typeof ip === 'number') {\n\t\t\treturn lookup4(ip);\n\t\t} else if (net.isIP(ip) === 4) {\n\t\t\treturn lookup4(utils.aton4(ip));\n\t\t} else if (net.isIP(ip) === 6) {\n\t\t\tvar ipv4 = get4mapped(ip);\n\t\t\tif (ipv4) {\n\t\t\t\treturn lookup4(utils.aton4(ipv4));\n\t\t\t} else {\n\t\t\t\treturn lookup6(utils.aton6(ip));\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\tpretty: function(n) {\n\t\tif (typeof n === 'string') {\n\t\t\treturn n;\n\t\t} else if (typeof n === 'number') {\n\t\t\treturn utils.ntoa4(n);\n\t\t} else if (n instanceof Array) {\n\t\t\treturn utils.ntoa6(n);\n\t\t}\n\n\t\treturn n;\n\t},\n\n\t// Start watching for data updates. The watcher waits one minute for file transfer to \n\t// completete before triggering the callback.\n\tstartWatchingDataUpdate: function (callback) {\n\t\tfsWatcher.makeFsWatchFilter(watcherName, geodatadir, 60*1000, function () {\n\t\t\t//Reload data\n\t\t\tasync.series([\n\t\t\t\tfunction (cb) {\n\t\t\t\t\tpreload(cb);\n\t\t\t\t},\n\t\t\t\tfunction (cb) {\n\t\t\t\t\tpreload6(cb);\n\t\t\t\t}\n\t\t\t], callback);\n\t\t});\n\t},\n\n\t// Stop watching for data updates.\n\tstopWatchingDataUpdate: function () {\n\t\tfsWatcher.stopWatching(watcherName);\n\t}\n};\n\npreload();\npreload6();\n\n//lookup4 = gen_lookup('geoip-country.dat', 4);\n//lookup6 = gen_lookup('geoip-country6.dat', 16);\n","/home/travis/build/npmtest/node-npmtest-geoip-lite/node_modules/geoip-lite/lib/utils.js":"var utils = module.exports = {};\n\nutils.aton4 = function(a) {\n  a = a.split(/\\./);\n  return ((parseInt(a[0], 10)<<24)>>>0) + ((parseInt(a[1], 10)<<16)>>>0) + ((parseInt(a[2], 10)<<8)>>>0) + (parseInt(a[3], 10)>>>0);\n};\n\nutils.aton6 = function(a) {\n  a = a.replace(/\"/g, '').split(/:/);\n\n  var l = a.length - 1;\n  var i;\n\n  if (a[l] === '') {\n    a[l] = 0;\n  }\n\n  if (l < 7) {\n    a.length = 8;\n\n    for (i = l; i >= 0 && a[i] !== ''; i--) {\n      a[7-l+i] = a[i];\n    }\n  }\n\n  for (i = 0; i < 8; i++) {\n    if (!a[i]) {\n      a[i]=0;\n    } else {\n      a[i] = parseInt(a[i], 16);\n    }\n  }\n\n  var r = [];\n  for (i = 0; i<4; i++) {\n    r.push(((a[2*i]<<16) + a[2*i+1])>>>0);\n  }\n\n  return r;\n};\n\n\nutils.cmp = function(a, b) {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return (a < b ? -1 : (a > b ? 1 : 0));\n  }\n\n  if (a instanceof Array && b instanceof Array) {\n    return this.cmp6(a, b);\n  }\n\n  return null;\n};\n\nutils.cmp6 = function(a, b) {\n  for (var ii = 0; ii < 2; ii++) {\n    if (a[ii] < b[ii]) {\n      return -1;\n    }\n\n    if (a[ii] > b[ii]) {\n      return 1;\n    }\n  }\n\n  return 0;\n};\n\nutils.isPrivateIP = function(addr) {\n  addr = addr.toString();\n\n  return addr.match(/^10\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})/) != null ||\n    addr.match(/^192\\.168\\.([0-9]{1,3})\\.([0-9]{1,3})/) != null ||\n    addr.match(/^172\\.16\\.([0-9]{1,3})\\.([0-9]{1,3})/) != null ||\n    addr.match(/^127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})/) != null ||\n    addr.match(/^169\\.254\\.([0-9]{1,3})\\.([0-9]{1,3})/) != null ||\n    addr.match(/^fc00:/) != null || addr.match(/^fe80:/) != null;\n};\n\nutils.ntoa4 = function(n) {\n  n = n.toString();\n  n = '' + (n>>>24&0xff) + '.' + (n>>>16&0xff) + '.' + (n>>>8&0xff) + '.' + (n&0xff);\n\n  return n;\n};\n\nutils.ntoa6 = function(n) {\n  var a = \"[\";\n\n  for (var i = 0; i<n.length; i++) {\n    a += (n[i]>>>16).toString(16) + ':';\n    a += (n[i]&0xffff).toString(16) + ':';\n  }\n\n  a = a.replace(/:$/, ']').replace(/:0+/g, ':').replace(/::+/, '::');\n\n  return a;\n};","/home/travis/build/npmtest/node-npmtest-geoip-lite/node_modules/geoip-lite/lib/fsWatcher.js":"var fs = require('fs'),\n    path = require('path'),\n    FSWatcher = {};\n\n/**\n * Takes a directory/file and watch for change. Upon change, call the\n * callback.\n *\n * @param {String} name: name of this watcher\n * @param {String} directory: path to the directory to watch\n * @param {String} [filename]: (optional) specific filename to watch for,\n *     watches for all files in the directory if unspecified\n * @param {Integer} cooldownDelay: delay to wait before triggering the callback\n * @param {Function} callback: function () : called when changes are detected\n**/\nfunction makeFsWatchFilter(name, directory, filename, cooldownDelay, callback) {\n\tvar cooldownId = null;\n\n\t//Delete the cooldownId and callback the outer function\n\tfunction timeoutCallback() {\n\t\tcooldownId = null;\n\t\tcallback();\n\t}\n\n\t//This function is called when there is a change in the data directory\n\t//It sets a timer to wait for the change to be completed\n\tfunction onWatchEvent(event, changedFile) {\n\t\tvar filePath = path.join(directory, changedFile);\n\n\t\tif (!filename || filename === changedFile) {\n\t\t\tfs.exists(filePath, function onExists(exists) {\n\t\t\t\tif (!exists) {\n\t\t\t\t\t// if the changed file no longer exists, it was a deletion.\n\t\t\t\t\t// we ignore deleted files\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t//At this point, a new file system activity has been detected,\n\t\t\t\t//We have to wait for file transfert to be finished before moving on.\n\n\t\t\t\t//If a cooldownId already exists, we delete it\n\t\t\t\tif (cooldownId !== null) {\n\t\t\t\t\tclearTimeout(cooldownId);\n\t\t\t\t\tcooldownId = null;\n\t\t\t\t}\n\n\t\t\t\t//Once the cooldownDelay has passed, the timeoutCallback function will be called\n\t\t\t\tcooldownId = setTimeout(timeoutCallback, cooldownDelay);\n\t\t\t});\n\t\t}\n\t}\n\n\t//Manage the case where filename is missing (because it's optionnal)\n\tif (typeof cooldownDelay === 'function') {\n\t\tcallback = cooldownDelay;\n\t\tcooldownDelay = filename;\n\t\tfilename = null;\n\t}\n\n\tif (FSWatcher[name]) {\n\t\tstopWatching(name);\n\t}\n\n\tFSWatcher[name] = fs.watch(directory, onWatchEvent);\n}\n\n/**\n * Take a FSWatcher object and close it.\n *\n * @param {string} name: name of the watcher to close\n *\n**/\nfunction stopWatching(name) {\n\tFSWatcher[name].close();\n}\n\nmodule.exports.makeFsWatchFilter = makeFsWatchFilter;\nmodule.exports.stopWatching = stopWatching;\n","/home/travis/build/npmtest/node-npmtest-geoip-lite/node_modules/geoip-lite/scripts/updatedb.js":"// fetches and converts maxmind lite databases\n\n'use strict';\n\nvar user_agent = 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.36 Safari/537.36';\n\nvar fs = require('fs');\nvar https = require('https');\nvar path = require('path');\nvar url = require('url');\nvar zlib = require('zlib');\n\nfs.existsSync = fs.existsSync || path.existsSync;\n\nvar async = require('async');\nvar colors = require('colors');\nvar glob = require('glob');\nvar iconv = require('iconv-lite');\nvar lazy = require('lazy');\nvar rimraf = require('rimraf').sync;\nvar unzip = require('unzip');\nvar utils = require('../lib/utils');\n\nvar dataPath = path.join(__dirname, '..', 'data');\nvar tmpPath = path.join(__dirname, '..', 'tmp');\n\nvar databases = [\n\t{\n\t\ttype: 'country',\n\t\turl: 'https://geolite.maxmind.com/download/geoip/database/GeoIPCountryCSV.zip',\n\t\tsrc: 'GeoIPCountryWhois.csv',\n\t\tdest: 'geoip-country.dat'\n\t},\n\t{\n\t\ttype: 'country',\n\t\turl: 'https://geolite.maxmind.com/download/geoip/database/GeoIPv6.csv.gz',\n\t\tsrc: 'GeoIPv6.csv',\n\t\tdest: 'geoip-country6.dat'\n\t},\n\t{\n\t\ttype: 'city-extended',\n\t\turl: 'https://geolite.maxmind.com/download/geoip/database/GeoLiteCity_CSV/GeoLiteCity-latest.zip',\n\t\tsrc: [\n\t\t\t'GeoLiteCity-Blocks.csv',\n\t\t\t'GeoLiteCity-Location.csv'\n\t\t],\n\t\tdest: [\n\t\t\t'geoip-city.dat',\n\t\t\t'geoip-city-names.dat'\n\t\t]\n\t},\n\t{\n\t\ttype: 'city',\n\t\turl: 'https://geolite.maxmind.com/download/geoip/database/GeoLiteCityv6-beta/GeoLiteCityv6.csv.gz',\n\t\tsrc: 'GeoLiteCityv6.csv',\n\t\tdest: 'geoip-city6.dat'\n\t}\n];\n\nfunction mkdir(name) {\n\tvar dir = path.dirname(name);\n\tif (!fs.existsSync(dir)) {\n\t\tfs.mkdirSync(dir);\n\t}\n}\n\n// Ref: http://stackoverflow.com/questions/8493195/how-can-i-parse-a-csv-string-with-javascript\n// Return array of string values, or NULL if CSV string not well formed.\nfunction CSVtoArray(text) {\n    var re_valid = /^\\s*(?:'[^'\\\\]*(?:\\\\[\\S\\s][^'\\\\]*)*'|\"[^\"\\\\]*(?:\\\\[\\S\\s][^\"\\\\]*)*\"|[^,'\"\\s\\\\]*(?:\\s+[^,'\"\\s\\\\]+)*)\\s*(?:,\\s*(?:'[^'\\\\]*(?:\\\\[\\S\\s][^'\\\\]*)*'|\"[^\"\\\\]*(?:\\\\[\\S\\s][^\"\\\\]*)*\"|[^,'\"\\s\\\\]*(?:\\s+[^,'\"\\s\\\\]+)*)\\s*)*$/;\n    var re_value = /(?!\\s*$)\\s*(?:'([^'\\\\]*(?:\\\\[\\S\\s][^'\\\\]*)*)'|\"([^\"\\\\]*(?:\\\\[\\S\\s][^\"\\\\]*)*)\"|([^,'\"\\s\\\\]*(?:\\s+[^,'\"\\s\\\\]+)*))\\s*(?:,|$)/g;\n    // Return NULL if input string is not well formed CSV string.\n    if (!re_valid.test(text)) return null;\n    var a = [];                     // Initialize array to receive values.\n    text.replace(re_value, // \"Walk\" the string using replace with callback.\n        function(m0, m1, m2, m3) {\n            // Remove backslash from \\' in single quoted values.\n            if      (m1 !== undefined) a.push(m1.replace(/\\\\'/g, \"'\"));\n            // Remove backslash from \\\" in double quoted values.\n            else if (m2 !== undefined) a.push(m2.replace(/\\\\\"/g, '\"'));\n            else if (m3 !== undefined) a.push(m3);\n            return ''; // Return empty string.\n        });\n    // Handle special case of empty last value.\n    if (/,\\s*$/.test(text)) a.push('');\n    return a;\n}\n\nfunction fetch(database, cb) {\n\n\tvar downloadUrl = database.url;\n\tvar fileName = downloadUrl.split('/').pop();\n\tvar gzip = path.extname(fileName) === '.gz';\n\n\tif (gzip) {\n\t\tfileName = fileName.replace('.gz', '');\n\t}\n\n\tvar tmpFile = path.join(tmpPath, fileName);\n\n\tif (fs.existsSync(tmpFile)) {\n\t\treturn cb(null, tmpFile, fileName, database);\n\t}\n\n\tconsole.log('Fetching ', downloadUrl);\n\n\tfunction getOptions() {\n\t\tvar options = url.parse(downloadUrl);\n\t\toptions.headers = {\n\t\t\t'User-Agent': user_agent\n\t\t};\n\n\t\tif (process.env.http_proxy || process.env.https_proxy) {\n\t\t\ttry {\n\t\t\t\tvar HttpsProxyAgent = require('https-proxy-agent');\n\t\t\t\toptions.agent = new HttpsProxyAgent(process.env.http_proxy || process.env.https_proxy);\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\tconsole.error(\"Install https-proxy-agent to use an HTTP/HTTPS proxy\");\n\t\t\t\tprocess.exit(-1)\n\t\t\t}\n\t\t}\n\n\t\treturn options;\n\t}\n\n\tfunction onResponse(response) {\n\t\tvar status = response.statusCode;\n\n\t\tif (status !== 200) {\n\t\t\tconsole.log('ERROR'.red + ': HTTP Request Failed [%d %s]', status, https.STATUS_CODES[status]);\n\t\t\tclient.abort();\n\t\t\tprocess.exit();\n\t\t}\n\n\t\tvar tmpFilePipe;\n\t\tvar tmpFileStream = fs.createWriteStream(tmpFile);\n\n\t\tif (gzip) {\n\t\t\ttmpFilePipe = response.pipe(zlib.createGunzip()).pipe(tmpFileStream);\n\t\t} else {\n\t\t\ttmpFilePipe = response.pipe(tmpFileStream);\n\t\t}\n\n\t\ttmpFilePipe.on('close', function() {\n\t\t\tconsole.log(' DONE'.green);\n\t\t\tcb(null, tmpFile, fileName, database);\n\t\t});\n\t}\n\n\tmkdir(tmpFile);\n\n\tvar client = https.get(getOptions(), onResponse);\n\n\tprocess.stdout.write('Retrieving ' + fileName + ' ...');\n}\n\nfunction extract(tmpFile, tmpFileName, database, cb) {\n\tif (path.extname(tmpFileName) !== '.zip') {\n\t\tcb(null, database);\n\t} else {\n\t\tprocess.stdout.write('Extracting ' + tmpFileName + ' ...');\n\t\tfs.createReadStream(tmpFile)\n\t\t\t.pipe(unzip.Parse())\n\t\t\t.on('entry', function(entry) {\n\t\t\t\tvar fileName = path.basename(entry.path);\n\t\t\t\tvar type = entry.type; // 'Directory' or 'File'\n\t\t\t\tif (type.toLowerCase() === 'file' && path.extname(fileName) === '.csv') {\n\t\t\t\t\tentry.pipe(fs.createWriteStream(path.join(tmpPath, fileName)));\n\t\t\t\t} else {\n\t\t\t\t\tentry.autodrain();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.on('finish', function() {\n\t\t\t\tcb(null, database);\n\t\t\t});\n\t}\n}\n\nfunction processCountryData(src, dest, cb) {\n\tvar lines=0;\n\tfunction processLine(line) {\n\t\tvar fields = CSVtoArray(line);\n\n\t\tif (!fields || fields.length < 6) {\n\t\t\tconsole.log(\"weird line: %s::\", line);\n\t\t\treturn;\n\t\t}\n\t\tlines++;\n\n\t\tvar sip;\n\t\tvar eip;\n\t\tvar cc = fields[4].replace(/\"/g, '');\n\t\tvar b;\n\t\tvar bsz;\n\t\tvar i;\n\n\t\tif (fields[0].match(/:/)) {\n\t\t\t// IPv6\n\t\t\tbsz = 34;\n\t\t\tsip = utils.aton6(fields[0]);\n\t\t\teip = utils.aton6(fields[1]);\n\n\t\t\tb = new Buffer(bsz);\n\t\t\tfor (i = 0; i < sip.length; i++) {\n\t\t\t\tb.writeUInt32BE(sip[i], i * 4);\n\t\t\t}\n\n\t\t\tfor (i = 0; i < eip.length; i++) {\n\t\t\t\tb.writeUInt32BE(eip[i], 16 + (i * 4));\n\t\t\t}\n\t\t} else {\n\t\t\t// IPv4\n\t\t\tbsz = 10;\n\n\t\t\tsip = parseInt(fields[2].replace(/\"/g, ''), 10);\n\t\t\teip = parseInt(fields[3].replace(/\"/g, ''), 10);\n\n\t\t\tb = new Buffer(bsz);\n\t\t\tb.fill(0);\n\t\t\tb.writeUInt32BE(sip, 0);\n\t\t\tb.writeUInt32BE(eip, 4);\n\t\t}\n\n\t\tb.write(cc, bsz - 2);\n\n\t\tfs.writeSync(datFile, b, 0, bsz, null);\n\t\tif(Date.now() - tstart > 5000) {\n\t\t\ttstart = Date.now();\n\t\t\tprocess.stdout.write('\\nStill working (' + lines + ') ...');\n\t\t}\n\t}\n\n\tvar dataFile = path.join(dataPath, dest);\n\tvar tmpDataFile = path.join(tmpPath, src);\n\n\trimraf(dataFile);\n\tmkdir(dataFile);\n\n\tprocess.stdout.write('Processing Data (may take a moment) ...');\n\tvar tstart = Date.now();\n\tvar datFile = fs.openSync(dataFile, \"w\");\n\n\tlazy(fs.createReadStream(tmpDataFile))\n\t\t.lines\n\t\t.map(function(byteArray) {\n\t\t\treturn iconv.decode(byteArray, 'latin1');\n\t\t})\n\t\t.skip(1)\n\t\t.map(processLine)\n\t\t.on('pipe', function() {\n\t\t\tconsole.log(' DONE'.green);\n\t\t\tcb();\n\t\t});\n}\n\nfunction processCityData(src, dest, cb) {\n\tvar lines = 0;\n\tfunction processLine(line) {\n\t\tif (line.match(/^Copyright/) || !line.match(/\\d/)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar fields = CSVtoArray(line);\n\t\tvar sip;\n\t\tvar eip;\n\t\tvar locId;\n\t\tvar b;\n\t\tvar bsz;\n\n\t\tvar i;\n\n\t\tlines++;\n\n\t\tif (fields[0].match(/:/)) {\n\t\t\t// IPv6\n\t\t\tvar offset = 0;\n\n\t\t\tvar cc = fields[4];\n\t\t\tvar city = fields[6];\n\t\t\tvar lat = Math.round(parseFloat(fields[7]) * 10000);\n\t\t\tvar lon = Math.round(parseFloat(fields[8]) * 10000);\n\t\t\tvar rg = fields[5];\n\n\t\t\tbsz = 58;\n\t\t\tsip = utils.aton6(fields[0]);\n\t\t\teip = utils.aton6(fields[1]);\n\n\t\t\tb = new Buffer(bsz);\n\t\t\tb.fill(0);\n\n\t\t\tfor (i = 0; i < sip.length; i++) {\n\t\t\t\tb.writeUInt32BE(sip[i], offset);\n\t\t\t\toffset += 4;\n\t\t\t}\n\n\t\t\tfor (i = 0; i < eip.length; i++) {\n\t\t\t\tb.writeUInt32BE(eip[i], offset);\n\t\t\t\toffset += 4;\n\t\t\t}\n\n\t\t\tb.write(cc, offset);\n\t\t\tb.write(rg, offset + 2);\n\t\t\tb.writeInt32BE(lat, offset + 4);\n\t\t\tb.writeInt32BE(lon, offset + 8);\n\t\t\tb.write(city, offset + 12);\n\t\t} else {\n\t\t\t// IPv4\n\t\t\tbsz = 12;\n\n\t\t\tsip = parseInt(fields[0], 10);\n\t\t\teip = parseInt(fields[1], 10);\n\t\t\tlocId = parseInt(fields[2], 10);\n\n\t\t\tb = new Buffer(bsz);\n\t\t\tb.fill(0);\n\t\t\tb.writeUInt32BE(sip>>>0, 0);\n\t\t\tb.writeUInt32BE(eip>>>0, 4);\n\t\t\tb.writeUInt32BE(locId>>>0, 8);\n\t\t}\n\n\t\tfs.writeSync(datFile, b, 0, b.length, null);\n\t\tif(Date.now() - tstart > 5000) {\n\t\t\ttstart = Date.now();\n\t\t\tprocess.stdout.write('\\nStill working (' + lines + ') ...');\n\t\t}\n\t}\n\n\tvar dataFile = path.join(dataPath, dest);\n\tvar tmpDataFile = path.join(tmpPath, src);\n\n\trimraf(dataFile);\n\n\tprocess.stdout.write('Processing Data (may take a moment) ...');\n\tvar tstart = Date.now();\n\tvar datFile = fs.openSync(dataFile, \"w\");\n\n\tlazy(fs.createReadStream(tmpDataFile))\n\t\t.lines\n\t\t.map(function(byteArray) {\n\t\t\treturn iconv.decode(byteArray, 'latin1');\n\t\t})\n\t\t.skip(1)\n\t\t.map(processLine)\n\t\t.on('pipe', cb);\n}\n\nfunction processCityDataNames(src, dest, cb) {\n\tvar locId = null;\n\n\tfunction processLine(line, i, a) {\n\t\tif (line.match(/^Copyright/) || !line.match(/\\d/)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar b;\n\t\tvar sz = 64;\n\t\tvar fields = CSVtoArray(line);\n\t\tif (locId === null)\n\t\t\tlocId = parseInt(fields[0]);\n\t\telse {\n\t\t\tif (parseInt(fields[0]) - 1 > locId) {\n\t\t\t\tb = new Buffer(sz);\n\t\t\t\tb.fill(0);\n\t\t\t\tfs.writeSync(datFile, b, 0, b.length, null);\n\t\t\t}\n\t\t\tlocId = parseInt(fields[0]);\n\t\t}\n\t\tvar cc = fields[1];\n\t\tvar rg = fields[2];\n\t\tvar city = fields[3];\n\t\tvar zip = parseInt(fields[4]);\n\t\tvar lat = Math.round(parseFloat(fields[5]) * 10000);\n\t\tvar lon = Math.round(parseFloat(fields[6]) * 10000);\n\t\tvar metro = parseInt(fields[7]);\n\n\t\tb = new Buffer(sz);\n\t\tb.fill(0);\n\t\tb.write(cc, 0);\n\t\tb.write(rg, 2);\n\t\tb.writeInt32BE(lat, 4);\n\t\tb.writeInt32BE(lon, 8);\n\n\t\tif(metro){\n\t\t\tb.writeInt32BE(metro, 12);\n\t\t}\n\n\t\tif(zip){\n\t\t\tb.writeInt32BE(zip, 16);\n\t\t}\n\n\t\tb.write(city, 20);\n\n\t\tfs.writeSync(datFile, b, 0, b.length, null);\n\t}\n\n\tvar dataFile = path.join(dataPath, dest);\n\tvar tmpDataFile = path.join(tmpPath, src);\n\n\trimraf(dataFile);\n\n\tvar datFile = fs.openSync(dataFile, \"w\");\n\n\tlazy(fs.createReadStream(tmpDataFile))\n\t\t.lines\n\t\t.map(function(byteArray) {\n\t\t\treturn iconv.decode(byteArray, 'latin1');\n\t\t})\n\t\t.skip(1)\n\t\t.map(processLine)\n\t\t.on('pipe', cb);\n}\n\nfunction processData(database, cb) {\n\tvar type = database.type;\n\tvar src = database.src;\n\tvar dest = database.dest;\n\n\tif (type === 'country') {\n\t\tprocessCountryData(src, dest, cb);\n\t} else if (type === 'city-extended') {\n\t\tprocessCityData(src[0], dest[0], function() {\n\t\t\tprocessCityDataNames(src[1], dest[1], function() {\n\t\t\t\tconsole.log(' DONE'.green);\n\t\t\t\tcb();\n\t\t\t});\n\t\t});\n\t} else {\n\t\tprocessCityData(src, dest, function() {\n\t\t\tconsole.log(' DONE'.green);\n\t\t\tcb();\n\t\t});\n\t}\n}\n\nrimraf(tmpPath);\nmkdir(tmpPath);\n\nasync.eachSeries(databases, function(database, nextDatabase) {\n\n\tasync.seq(fetch, extract, processData)(database, nextDatabase);\n\n}, function(err) {\n\tif (err) {\n\t\tconsole.log('Failed to Update Databases from MaxMind.'.red);\n\t\tprocess.exit(1);\n\t} else {\n\t\tconsole.log('Successfully Updated Databases from MaxMind.'.green);\n\t\tif (process.argv[2]=='debug') console.log('Notice: temporary files are not deleted for debug purposes.'.bold.yellow);\n\t\telse rimraf(tmpPath);\n\t\tprocess.exit(0);\n\t}\n});\n"}